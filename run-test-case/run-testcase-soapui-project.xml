<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="runTestCase" resourceRoot="" soapui-version="4.5.2" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:testSuite name="TestSuite 1" id="2064d2c0-32ae-4ec4-ba92-b1ee01bbb9d1">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="templateTestCase" searchProperties="true" id="bcec9a51-c9ae-4668-ad69-8dc9eeb6578c" disabled="true">
      <con:description>This is a template test case and can be reused by calling it from other test cases.
Hence this test case is disabled.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script">
        <con:settings/>
        <con:config>
          <script>context.testCase.with {
	log.info "In template test case, doing the required stuff for ${getPropertyValue('CALLER_TEST_CASE')} test case"	
//Read the property values passed to template test case
	def input1 = getPropertyValue('INPUT1')
	def input2 = getPropertyValue('INPUT2')
//You can do any thing; in this example just merging both input values
	def returnValue = input1 + input2
//Get the calle test case object; the case who called this template test case
	def tTC = testSuite.testCases[getPropertyValue('CALLER_TEST_CASE')]
//Set the value into the calle test case property
	tTC.setPropertyValue(getPropertyValue('RETURN_PROPERTY'), returnValue)
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>INPUT1</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>INPUT2</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>CALLER_TEST_CASE</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RETURN_PROPERTY</con:name>
          <con:value/>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase1" searchProperties="true" id="f58f20ff-a395-4931-81e9-fe532a492d4d">
      <con:description>This test case calls "templateTestCase" in "Run TestCase" step.
It passes two input data say INPUT1, and INPUT2.
And do some computation based on input  and returns the value to 
a given property say "RETURN_VALUE".
Finally after finishing the "run testcase" step, print the return value 
in current test case, getData test step</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="setData">
        <con:settings/>
        <con:config>
          <script>def lbl = context.testCase.name
def val = System.currentTimeMillis()
log.info "Setting the data for test case ${lbl}"
def setValue = { name, value -> context.testCase.setPropertyValue(name, value.toString())}

setValue 'INPUT1', "${lbl} input1 ${val}"
setValue 'INPUT2', "${lbl} input2 ${val}"
setValue 'CALLER_TEST_CASE', context.testCase.name</script>
        </con:config>
      </con:testStep>
      <con:testStep type="calltestcase" name="Run TestCase">
        <con:settings/>
        <con:config xsi:type="con:RunTestCaseStep" ignoreEmptyProperties="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:targetTestCase>bcec9a51-c9ae-4668-ad69-8dc9eeb6578c</con:targetTestCase>
          <con:properties>
            <con:property>
              <con:name>INPUT1</con:name>
              <con:value>${#TestCase#INPUT1}</con:value>
            </con:property>
            <con:property>
              <con:name>INPUT2</con:name>
              <con:value>${#TestCase#INPUT2}</con:value>
            </con:property>
            <con:property>
              <con:name>CALLER_TEST_CASE</con:name>
              <con:value>${#TestCase#CALLER_TEST_CASE}</con:value>
            </con:property>
            <con:property>
              <con:name>RETURN_PROPERTY</con:name>
              <con:value>RETURN_VALUE</con:value>
            </con:property>
          </con:properties>
          <con:returnProperties/>
          <con:runMode>PARALLELL</con:runMode>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="getData">
        <con:settings/>
        <con:config>
          <script>log.info "Return value : ${context.expand('${#TestCase#RETURN_VALUE}')}"</script>
        </con:config>
      </con:testStep>
      <con:properties></con:properties>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase2" searchProperties="true" id="a9a0a255-baec-45e7-a3f1-27c44cba252c">
      <con:description>This test case calls "templateTestCase" in "Run TestCase" step.
It passes two input data say INPUT1, and INPUT2.
And do some computation based on input  and returns the value to 
a given property say "OUTPUT_VALUE".
Finally after finishing the "run testcase" step, print the return value 
in current test case, getData test step</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="setData">
        <con:settings/>
        <con:config>
          <script>def lbl = context.testCase.name
def val = System.currentTimeMillis()
log.info "Setting the data for test case ${lbl}"
def setValue = { name, value -> context.testCase.setPropertyValue(name, value.toString())}

setValue 'INPUT1', "${lbl} input1 ${val}"
setValue 'INPUT2', "${lbl} input2 ${val}"
setValue 'CALLER_TEST_CASE', context.testCase.name</script>
        </con:config>
      </con:testStep>
      <con:testStep type="calltestcase" name="Run TestCase">
        <con:settings/>
        <con:config xsi:type="con:RunTestCaseStep" ignoreEmptyProperties="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:targetTestCase>bcec9a51-c9ae-4668-ad69-8dc9eeb6578c</con:targetTestCase>
          <con:properties>
            <con:property>
              <con:name>INPUT1</con:name>
              <con:value>${#TestCase#INPUT1}</con:value>
            </con:property>
            <con:property>
              <con:name>INPUT2</con:name>
              <con:value>${#TestCase#INPUT2}</con:value>
            </con:property>
            <con:property>
              <con:name>CALLER_TEST_CASE</con:name>
              <con:value>${#TestCase#CALLER_TEST_CASE}</con:value>
            </con:property>
            <con:property>
              <con:name>RETURN_PROPERTY</con:name>
              <con:value>OUTPUT_VALUE</con:value>
            </con:property>
          </con:properties>
          <con:returnProperties/>
          <con:runMode>PARALLELL</con:runMode>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="getData">
        <con:settings/>
        <con:config>
          <script>log.info "Return value : ${context.expand('${#TestCase#OUTPUT_VALUE}')}"</script>
        </con:config>
      </con:testStep>
      <con:properties></con:properties>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:properties/>
  <con:wssContainer/>
  <con:sensitiveInformation/>
</con:soapui-project>
